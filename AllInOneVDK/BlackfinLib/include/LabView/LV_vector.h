/************************************************************************
 *
 * LV_vector.h
 *
 * (c) Copyright 2005-2006 Analog Devices, Inc.  All rights reserved.
 * $Revision: 4 $
 ************************************************************************/

#ifndef __LV_VECTOR_DEFINED
#define __LV_VECTOR_DEFINED

#include <vector.h>

#ifdef __cplusplus
  extern "C" {
#endif


/*
   Passing of complex 1D-vectors from LabView into Blackfin LibDSP

   | Function argument generated by LabView |
        |
         --> | Pointer to data structure |
                  |
                   --> | Number of elements            |
                       | Start complex matrix elements |  <= Address required
                       | ..                            |     by BLackfin libdsp
                                                             library functions.

*/


#pragma always_inline
static __inline void
cvecsaddf_LV (const complex_float ** const _vector[],
              const complex_float * _scalar,
              complex_float ** _sum[], int _length)
{
   cvecsaddf( (complex_float *) ((*_vector) + 1), 
              *_scalar,
              (complex_float *) ((*_sum) + 1), 
              _length );
}

#pragma always_inline
static __inline void
cvecssubf_LV (const complex_float ** const _vector[], 
              const complex_float * _scalar,
              complex_float ** _difference[], int _length)
{
   cvecssubf( (complex_float *) ((*_vector) + 1),
              *_scalar,
              (complex_float *) ((*_difference) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecsmltf_LV (const complex_float ** const _vector[], 
              const complex_float * _scalar,
              complex_float ** _product[], int _length)
{
   cvecsmltf( (complex_float *) ((*_vector) + 1),
              *_scalar,
              (complex_float *) ((*_product) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecvaddf_LV (const complex_float ** const _vector_a[],
              const complex_float ** const _vector_b[],
              complex_float ** _sum[], int _length)
{
   cvecvaddf( (complex_float *) ((*_vector_a) + 1), 
              (complex_float *) ((*_vector_b) + 1), 
              (complex_float *) ((*_sum) + 1), 
              _length );
}

#pragma always_inline
static __inline void
cvecvsubf_LV (const complex_float ** const _vector_a[],
              const complex_float ** const _vector_b[],
              complex_float ** _difference[], int _length)
{
   cvecvsubf( (complex_float *) ((*_vector_a) + 1),
              (complex_float *) ((*_vector_b) + 1),
              (complex_float *) ((*_difference) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecvmltf_LV (const complex_float ** const _vector_a[],
              const complex_float ** const _vector_b[],
              complex_float ** _product[], int _length)
{
   cvecvmltf( (complex_float *) ((*_vector_a) + 1),
              (complex_float *) ((*_vector_b) + 1),
              (complex_float *) ((*_product) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecdotf_LV  (const complex_float ** const _vector_a[], 
              const complex_float ** const _vector_b[],
              complex_float * _dotproduct, int _length)
{
   *_dotproduct = cvecdotf( (complex_float *) ((*_vector_a) + 1), 
                            (complex_float *) ((*_vector_b) + 1), 
                            _length );
}


#pragma always_inline
static __inline void
cvecsaddd_LV (const complex_long_double ** const _vector[], 
              const complex_long_double * _scalar,
              complex_long_double ** _sum[], int _length)
{
   cvecsaddd( (complex_long_double *) ((*_vector) + 1), 
              *_scalar, 
              (complex_long_double *) ((*_sum) + 1), 
              _length );
}

#pragma always_inline
static __inline void
cvecssubd_LV (const complex_long_double ** const _vector[], 
              const complex_long_double * _scalar,
              complex_long_double ** _difference[], int _length)
{
   cvecssubd( (complex_long_double *) ((*_vector) + 1),
              *_scalar,
              (complex_long_double *) ((*_difference) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecsmltd_LV (const complex_long_double ** const _vector[], 
              const complex_long_double * _scalar,
              complex_long_double ** _product[], int _length)
{
   cvecsmltd( (complex_long_double *) ((*_vector) + 1),
              *_scalar,
              (complex_long_double *) ((*_product) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecvaddd_LV (const complex_long_double ** const _vector_a[],
              const complex_long_double ** const _vector_b[],
              complex_long_double ** _sum[], int _length)
{
   cvecvaddd( (complex_long_double *) ((*_vector_a) + 1), 
              (complex_long_double *) ((*_vector_b) + 1), 
              (complex_long_double *) ((*_sum) + 1), 
              _length );
}

#pragma always_inline
static __inline void
cvecvsubd_LV (const complex_long_double ** const _vector_a[],
              const complex_long_double ** const _vector_b[],
              complex_long_double ** _difference[], int _length)
{
   cvecvsubd( (complex_long_double *) ((*_vector_a) + 1),
              (complex_long_double *) ((*_vector_b) + 1),
              (complex_long_double *) ((*_difference) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecvmltd_LV (const complex_long_double ** const _vector_a[],
              const complex_long_double ** const _vector_b[],
              complex_long_double ** _product[], int _length)
{
   cvecvmltd( (complex_long_double *) ((*_vector_a) + 1),
              (complex_long_double *) ((*_vector_b) + 1),
              (complex_long_double *) ((*_product) + 1),
              _length );
}

#pragma always_inline
static __inline void
cvecdotd_LV  (const complex_long_double ** const _vector_a[], 
              const complex_long_double ** const _vector_b[],
              complex_long_double *_dotproduct, int _length)
{
   *_dotproduct = cvecdotd( (complex_long_double *) ((*_vector_a) + 1), 
                            (complex_long_double *) ((*_vector_b) + 1), 
                            _length );
}


#pragma always_inline
static __inline void
cvecsadd_fr16_LV (const complex_fract16 ** const _vector[], 
                  const complex_fract16 * _scalar,
                  complex_fract16 ** _sum[], int _length)
{
   cvecsadd_fr16( (complex_fract16 *) ((*_vector) + 1), 
                  *_scalar, 
                  (complex_fract16 *) ((*_sum) + 1), 
                  _length );
}

#pragma always_inline
static __inline void
cvecssub_fr16_LV (const complex_fract16 ** const _vector[], 
                  const complex_fract16 * _scalar,
                  complex_fract16 ** _difference[], int _length)
{
   cvecssub_fr16( (complex_fract16 *) ((*_vector) + 1),
                  *_scalar,
                  (complex_fract16 *) ((*_difference) + 1),
                  _length );
}

#pragma always_inline
static __inline void
cvecsmlt_fr16_LV (const complex_fract16 ** const _vector[], 
                  const complex_fract16 * _scalar,
                  complex_fract16 ** _product[], int _length)
{
   cvecsmlt_fr16( (complex_fract16 *) ((*_vector) + 1),
                  *_scalar,
                  (complex_fract16 *) ((*_product) + 1),
                  _length );
}

#pragma always_inline
static __inline void
cvecvadd_fr16_LV (const complex_fract16 ** const _vector_a[],
                  const complex_fract16 ** const _vector_b[],
                  complex_fract16 ** _sum[], int _length)
{
   cvecvadd_fr16( (complex_fract16 *) ((*_vector_a) + 1),
                  (complex_fract16 *) ((*_vector_b) + 1),
                  (complex_fract16 *) ((*_sum) + 1),
                  _length );
}

#pragma always_inline
static __inline void
cvecvsub_fr16_LV (const complex_fract16 ** const _vector_a[],
                  const complex_fract16 ** const _vector_b[],
                  complex_fract16 ** _difference[], int _length)
{
   cvecvsub_fr16( (complex_fract16 *) ((*_vector_a) + 1),
                  (complex_fract16 *) ((*_vector_b) + 1),
                  (complex_fract16 *) ((*_difference) + 1),
                  _length );
}

#pragma always_inline
static __inline void
cvecvmlt_fr16_LV (const complex_fract16 ** const _vector_a[],
                  const complex_fract16 ** const _vector_b[],
                  complex_fract16 ** _product[], int _length)
{
   cvecvmlt_fr16( (complex_fract16 *) ((*_vector_a) + 1),
                  (complex_fract16 *) ((*_vector_b) + 1),
                  (complex_fract16 *) ((*_product) + 1),
                  _length );
}

#pragma always_inline
static __inline void
cvecdot_fr16_LV  (const complex_fract16 ** const _vector_a[], 
                  const complex_fract16 ** const _vector_b[],
                  complex_fract16 *_dotproduct, int _length)
{
   *_dotproduct = cvecdot_fr16( (complex_fract16 *) ((*_vector_a) + 1), 
                                (complex_fract16 *) ((*_vector_b) + 1), 
                                _length );
}


#ifdef __cplusplus
  }
#endif
#endif  /* __LV_VECTOR_DEFINED */
