/************************************************************************
 *
 * exception
 *
 * (c) Copyright 2001-2009 Analog Devices, Inc.  All rights reserved.
 * (c) Copyright 1992-2008 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * $Revision: 1.10 $
 ************************************************************************/

#pragma once
#ifndef __NO_BUILTIN
#pragma system_header /* exception */
#endif

// exception standard header
#ifndef _EXCEPTION_
#define _EXCEPTION_
#include <xstddef>

_X_STD_BEGIN

		// FORWARD REFERENCES
class exception;
typedef void (*_Prhand)(const exception&);
extern _Prhand _Raise_handler;
void _Throw(const exception&);

class exception
{
   // base of all library exceptions
   public:
         static _Prhand _Set_raise_handler(_Prhand _Pnew)
               {
       // register a handler for _Raise calls
                 const _Prhand _Pold = _Raise_handler;
                 _Raise_handler = _Pnew;
                 return (_Pold);
               }

         explicit exception(const char *_Message = _MESG("unknown")) _THROW0()
                  : _Ptr(_Message)
               {
       // construct from message string
               }

         exception(const exception& _Right) _THROW0()
                  : _Ptr(_Right._Ptr)
               {
     // construct by copying _Right
               }

         exception& operator=(const exception& _Right) _THROW0()
               {
       // assign _Right
                 _Ptr = _Right._Ptr;
                 return (*this);
               }

         virtual ~exception()
               {
       // destroy the object
               }

         virtual const char *what() const _THROW0()
               {
       // return pointer to message string
                 return (_Ptr);
               }

         void _Raise() const
               {
       // raise the exception
                 if (_Raise_handler != 0)
                         (*_Raise_handler)(*this);    // call raise handler if present

                 _Doraise();  // call the protected virtual
                 _RAISE(*this);       // raise this exception
              }

  protected:
      virtual void _Doraise() const
              {
      // perform class-specific exception handling
              }

        const char *_Ptr;     // the message pointer
};


// CLASS bad_exception
class bad_exception : public exception
{
  // base of all bad exceptions
  public:
      bad_exception(const char *_Message = _MESG("bad exception")) _THROW0()
                 : exception(_Message)
              {
      // construct from message string
              }

    bad_exception& operator=(const bad_exception& e) _THROW0()
    {
      exception::operator=(e);
      return (*this);
    }

    virtual const char *what() const _THROW0()
    {
      return (_Ptr);
    }

        virtual ~bad_exception() _THROW0()
              {
      // destroy the object
              }

  protected:
      virtual void _Doraise() const
              {
      // raise this exception
                _RAISE(*this);
              }
};

		// TYPES
typedef void (*terminate_handler)();
typedef void (*unexpected_handler)();

		// FUNCTION DECLARATIONS
terminate_handler set_terminate(terminate_handler) _THROW0();
unexpected_handler set_unexpected(unexpected_handler) _THROW0();
bool uncaught_exception();

#pragma noreturn
void terminate();

#pragma noreturn
void unexpected();

_X_STD_END

#endif /* _EXCEPTION_ */

